<?php

/**
 * @file
 * gin_toolbar.module
 */

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function gin_toolbar_preprocess_html(&$variables) {
  // Get theme darkmode config.
  $darkmode = theme_get_setting('enable_darkmode', 'gin');

  if ($darkmode === 1) {
    $variables['attributes']['class'][] = 'gin--dark-mode';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_attachments.
 */
function gin_toolbar_page_attachments_alter(&$page) {
  // Is User logged in?
  $logged_in = \Drupal::currentUser()->isAuthenticated();

  if ($logged_in) {
    // Get theme configs.
    $accent_color = theme_get_setting('accent_color', 'gin');
    $darkmode = theme_get_setting('enable_darkmode', 'gin');
    $classic_toolbar = theme_get_setting('classic_toolbar', 'gin');

    if ($classic_toolbar) {
      // Attach the classic toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_classic_toolbar';
    }
    else {
      // Attach toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_toolbar';
    }

    // Attach accent overrides CSS.
    $page['#attached']['library'][] = 'gin/gin_accent';

    // Expose settings to JS.
    $page['#attached']['drupalSettings']['gin']['accent_color'] = $accent_color;
    $page['#attached']['drupalSettings']['gin']['darkmode'] = $darkmode;
  }
}

/**
 * Toolbar alter().
 */
function gin_toolbar_theme_registry_alter(&$theme_registry) {
  $classic_toolbar = theme_get_setting('classic_toolbar', 'gin');

  if (!$classic_toolbar) {
    $theme_registry['toolbar']['path'] = drupal_get_path('module', 'gin_toolbar') . '/templates';
    $theme_registry['menu__toolbar']['path'] = drupal_get_path('module', 'gin_toolbar') . '/templates';
  }
}

/**
 * Increases or decreases the brightness of a color.
 */
function _gin_toolbar_adjust_brightness($hexCode, $adjustPercent) {
  $hexCode = ltrim($hexCode, '#');

  if (strlen($hexCode) == 3) {
    $hexCode = $hexCode[0] . $hexCode[0] . $hexCode[1] . $hexCode[1] . $hexCode[2] . $hexCode[2];
  }

  $hexCode = array_map('hexdec', str_split($hexCode, 2));

  foreach ($hexCode as & $color) {
    $adjustableLimit = $adjustPercent < 0 ? $color : 255 - $color;
    $adjustAmount = ceil($adjustableLimit * $adjustPercent);

    $color = str_pad(dechex($color + $adjustAmount), 2, '0', STR_PAD_LEFT);
  }

  return '#' . implode($hexCode);
}
